// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreliable_afs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unreliable_5fafs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unreliable_5fafs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unreliable_5fafs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_unreliable_5fafs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unreliable_5fafs_2eproto;
namespace unreliable_afs {
class MkDirReply;
struct MkDirReplyDefaultTypeInternal;
extern MkDirReplyDefaultTypeInternal _MkDirReply_default_instance_;
class MkDirReq;
struct MkDirReqDefaultTypeInternal;
extern MkDirReqDefaultTypeInternal _MkDirReq_default_instance_;
}  // namespace unreliable_afs
PROTOBUF_NAMESPACE_OPEN
template<> ::unreliable_afs::MkDirReply* Arena::CreateMaybeMessage<::unreliable_afs::MkDirReply>(Arena*);
template<> ::unreliable_afs::MkDirReq* Arena::CreateMaybeMessage<::unreliable_afs::MkDirReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unreliable_afs {

// ===================================================================

class MkDirReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unreliable_afs.MkDirReq) */ {
 public:
  inline MkDirReq() : MkDirReq(nullptr) {}
  ~MkDirReq() override;
  explicit PROTOBUF_CONSTEXPR MkDirReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MkDirReq(const MkDirReq& from);
  MkDirReq(MkDirReq&& from) noexcept
    : MkDirReq() {
    *this = ::std::move(from);
  }

  inline MkDirReq& operator=(const MkDirReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkDirReq& operator=(MkDirReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MkDirReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MkDirReq* internal_default_instance() {
    return reinterpret_cast<const MkDirReq*>(
               &_MkDirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MkDirReq& a, MkDirReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MkDirReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkDirReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MkDirReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MkDirReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MkDirReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MkDirReq& from) {
    MkDirReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkDirReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unreliable_afs.MkDirReq";
  }
  protected:
  explicit MkDirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 mode = 2;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unreliable_afs.MkDirReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int32_t mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreliable_5fafs_2eproto;
};
// -------------------------------------------------------------------

class MkDirReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unreliable_afs.MkDirReply) */ {
 public:
  inline MkDirReply() : MkDirReply(nullptr) {}
  ~MkDirReply() override;
  explicit PROTOBUF_CONSTEXPR MkDirReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MkDirReply(const MkDirReply& from);
  MkDirReply(MkDirReply&& from) noexcept
    : MkDirReply() {
    *this = ::std::move(from);
  }

  inline MkDirReply& operator=(const MkDirReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkDirReply& operator=(MkDirReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MkDirReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MkDirReply* internal_default_instance() {
    return reinterpret_cast<const MkDirReply*>(
               &_MkDirReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MkDirReply& a, MkDirReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MkDirReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkDirReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MkDirReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MkDirReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MkDirReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MkDirReply& from) {
    MkDirReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkDirReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unreliable_afs.MkDirReply";
  }
  protected:
  explicit MkDirReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // int32 err = 1;
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unreliable_afs.MkDirReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreliable_5fafs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MkDirReq

// string path = 1;
inline void MkDirReq::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& MkDirReq::path() const {
  // @@protoc_insertion_point(field_get:unreliable_afs.MkDirReq.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MkDirReq::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unreliable_afs.MkDirReq.path)
}
inline std::string* MkDirReq::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:unreliable_afs.MkDirReq.path)
  return _s;
}
inline const std::string& MkDirReq::_internal_path() const {
  return _impl_.path_.Get();
}
inline void MkDirReq::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* MkDirReq::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* MkDirReq::release_path() {
  // @@protoc_insertion_point(field_release:unreliable_afs.MkDirReq.path)
  return _impl_.path_.Release();
}
inline void MkDirReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unreliable_afs.MkDirReq.path)
}

// int32 mode = 2;
inline void MkDirReq::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t MkDirReq::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t MkDirReq::mode() const {
  // @@protoc_insertion_point(field_get:unreliable_afs.MkDirReq.mode)
  return _internal_mode();
}
inline void MkDirReq::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void MkDirReq::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:unreliable_afs.MkDirReq.mode)
}

// -------------------------------------------------------------------

// MkDirReply

// int32 err = 1;
inline void MkDirReply::clear_err() {
  _impl_.err_ = 0;
}
inline int32_t MkDirReply::_internal_err() const {
  return _impl_.err_;
}
inline int32_t MkDirReply::err() const {
  // @@protoc_insertion_point(field_get:unreliable_afs.MkDirReply.err)
  return _internal_err();
}
inline void MkDirReply::_internal_set_err(int32_t value) {
  
  _impl_.err_ = value;
}
inline void MkDirReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:unreliable_afs.MkDirReply.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace unreliable_afs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unreliable_5fafs_2eproto
